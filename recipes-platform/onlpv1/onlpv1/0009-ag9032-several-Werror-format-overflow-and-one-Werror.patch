From 5d6dedf159e3c36388cf2317cb0f48787a03932c Mon Sep 17 00:00:00 2001
From: Tobias Jungel <tobias.jungel@bisdn.de>
Date: Thu, 11 Apr 2019 22:01:59 +0200
Subject: [PATCH 09/12] ag9032: several -Werror=format-overflow= and one
 -Werror=maybe-uninitialized fixed

---
 .../onlp/builds/src/module/src/fani.c         | 26 +++++++-------
 .../onlp/builds/src/module/src/platform_lib.c | 22 ++++++------
 .../onlp/builds/src/module/src/psui.c         | 36 +++++++++----------
 .../onlp/builds/src/module/src/sfpi.c         | 16 ++++-----
 .../onlp/builds/src/module/src/thermali.c     | 17 ++++-----
 5 files changed, 59 insertions(+), 58 deletions(-)

diff --git a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/fani.c b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/fani.c
index 80123c55..983e904c 100644
--- a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/fani.c
+++ b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/fani.c
@@ -118,7 +118,7 @@ dni_fani_info_get_fan(int local_id, onlp_fan_info_t* info)
     dev_info.offset = 0x00;
     dev_info.flags = DEFAULT_FLAG;
 
-    sprintf(fullpath, "%s%s", PREFIX_PATH, fan_path[local_id].speed);
+    snprintf(fullpath, sizeof(fullpath), "%s%s", PREFIX_PATH, fan_path[local_id].speed);
     rpm = dni_i2c_lock_read_attribute(&mux_info, fullpath);
     info->rpm = rpm;
 
@@ -187,12 +187,12 @@ dni_fani_info_get_fan_on_psu(int local_id, onlp_fan_info_t* info)
     switch (local_id) {
     case FAN_1_ON_PSU1:
 	channel = PSU_I2C_SEL_PSU1_EEPROM;
-	sprintf(channel_data, "%x", PSU_I2C_SEL_PSU1_EEPROM);
+	snprintf(channel_data, sizeof(channel_data), "%x", PSU_I2C_SEL_PSU1_EEPROM);
     	dni_i2c_lock_write_attribute(NULL, channel_data, PSU_SELECT_MEMBER_PATH);
 	break;
     case FAN_1_ON_PSU2:
 	channel = PSU_I2C_SEL_PSU2_EEPROM;
-	sprintf(channel_data, "%x", PSU_I2C_SEL_PSU2_EEPROM);
+	snprintf(channel_data, sizeof(channel_data), "%x", PSU_I2C_SEL_PSU2_EEPROM);
     	dni_i2c_lock_write_attribute(NULL, channel_data, PSU_SELECT_MEMBER_PATH);
 	break;
     default:
@@ -221,7 +221,7 @@ dni_fani_info_get_fan_on_psu(int local_id, onlp_fan_info_t* info)
      * Read PSU FAN Fault from psu_fan1_fault
      * Return 1 is PSU fan fault
      */
-    sprintf(fullpath, "%s%s", PREFIX_PATH, fan_path[local_id].status);
+    snprintf(fullpath, sizeof(fullpath), "%s%s", PREFIX_PATH, fan_path[local_id].status);
     r_data = dni_i2c_lock_read_attribute(&mux_info, fullpath);
 
     if (r_data == 1) {
@@ -229,7 +229,7 @@ dni_fani_info_get_fan_on_psu(int local_id, onlp_fan_info_t* info)
     }
 
     /* Read PSU FAN speed from psu_fan1_speed_rpm */
-    sprintf(fullpath, "%s%s", PREFIX_PATH, fan_path[local_id].speed);
+    snprintf(fullpath, sizeof(fullpath), "%s%s", PREFIX_PATH, fan_path[local_id].speed);
     r_data = dni_i2c_lock_read_attribute(&mux_info, fullpath);
     info->rpm = r_data;
 
@@ -245,7 +245,7 @@ dni_fani_info_get_fan_on_psu(int local_id, onlp_fan_info_t* info)
 int
 onlp_fani_init(void)
 {
-    lockinit(); 
+    lockinit();
     return ONLP_STATUS_OK;
 }
 
@@ -299,7 +299,7 @@ int
 onlp_fani_rpm_set(onlp_oid_t id, int rpm)
 {
     int  local_id;
-    char data[10] = {0};
+    char data[12] = {0};
     char fullpath[70] = {0};
     VALIDATE(id);
     local_id = ONLP_OID_ID_GET(id);
@@ -317,12 +317,12 @@ onlp_fani_rpm_set(onlp_oid_t id, int rpm)
         case FAN_8_ON_FAN_BOARD:
         case FAN_9_ON_FAN_BOARD:
         case FAN_10_ON_FAN_BOARD:
-            sprintf(fullpath, "%s%s", PREFIX_PATH, fan_path[local_id].speed);
+            snprintf(fullpath, sizeof(fullpath), "%s%s", PREFIX_PATH, fan_path[local_id].speed);
             break;
         default:
             return ONLP_STATUS_E_INVALID;
     }
-    sprintf(data, "%d", rpm);
+    snprintf(data, sizeof(data), "%d", rpm);
 
     dni_i2c_lock_write_attribute(NULL, data, fullpath);
 
@@ -351,12 +351,12 @@ onlp_fani_percentage_set(onlp_oid_t id, int p)
     /* Select PSU member */
     switch (local_id) {
     case FAN_1_ON_PSU1:
-        sprintf(channel_data, "%x", PSU_I2C_SEL_PSU1_EEPROM);
+        snprintf(channel_data, sizeof(channel_data), "%x", PSU_I2C_SEL_PSU1_EEPROM);
 	dni_i2c_lock_write_attribute(NULL, channel_data,
                              "/sys/bus/i2c/devices/4-0058/psu_select_member");
         break;
     case FAN_1_ON_PSU2:
-        sprintf(channel_data, "%x", PSU_I2C_SEL_PSU2_EEPROM);
+        snprintf(channel_data, sizeof(channel_data), "%x", PSU_I2C_SEL_PSU2_EEPROM);
 	dni_i2c_lock_write_attribute(NULL, channel_data,
                              "/sys/bus/i2c/devices/4-0058/psu_select_member");
         break;
@@ -375,10 +375,10 @@ onlp_fani_percentage_set(onlp_oid_t id, int p)
         return ONLP_STATUS_E_INVALID;
     }
 
-    sprintf(fullpath, "%s%s", PREFIX_PATH, fan_path[local_id].ctrl_speed);
+    snprintf(fullpath, sizeof(fullpath), "%s%s", PREFIX_PATH, fan_path[local_id].ctrl_speed);
 
     /* Write percentage to psu_fan1_duty_cycle_percentage */
-    sprintf(data, "%d", p);
+    snprintf(data, sizeof(data), "%d", p);
     dni_i2c_lock_write_attribute(NULL, data, fullpath);
 
     return ONLP_STATUS_OK;
diff --git a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/platform_lib.c b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/platform_lib.c
index e439bbdb..e8c62b70 100644
--- a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/platform_lib.c
+++ b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/platform_lib.c
@@ -46,7 +46,7 @@ static   onlp_shlock_t* dni_lock = NULL;
         onlp_shlock_give(dni_lock);\
     }while(0)
 
-#define DNILOCK_MAGIC 0xE3A0B4E6 
+#define DNILOCK_MAGIC 0xE3A0B4E6
 
 void lockinit()
 {
@@ -145,13 +145,13 @@ int dni_i2c_lock_read( mux_info_t * mux_info, dev_info_t * dev_info)
     int r_data=0;
     DNI_BUS_LOCK();
     if(mux_info != NULL)
-        dni_swpld_write_attribute(mux_info->offset, mux_info->channel,BUS_LOCKED);   
-    
+        dni_swpld_write_attribute(mux_info->offset, mux_info->channel,BUS_LOCKED);
+
     if(dev_info->size == 1)
         r_data = onlp_i2c_readb(dev_info->bus, dev_info->addr, dev_info->offset, dev_info->flags);
     else
         r_data = onlp_i2c_readw(dev_info->bus, dev_info->addr, dev_info->offset, dev_info->flags);
- 
+
     DNI_BUS_UNLOCK();
     return r_data;
 }
@@ -160,7 +160,7 @@ int dni_i2c_lock_write( mux_info_t * mux_info, dev_info_t * dev_info)
 {
     DNI_BUS_LOCK();
     if(mux_info != NULL)
-        dni_swpld_write_attribute(mux_info->offset, mux_info->channel,BUS_LOCKED);   
+        dni_swpld_write_attribute(mux_info->offset, mux_info->channel,BUS_LOCKED);
     /* Write size */
     if(dev_info->size == 1)
         onlp_i2c_write(dev_info->bus, dev_info->addr, dev_info->offset, 1, &dev_info->data_8, dev_info->flags);
@@ -178,7 +178,7 @@ int dni_i2c_lock_read_attribute(mux_info_t * mux_info, char * fullpath)
 
     DNI_BUS_LOCK();
     if(mux_info != NULL)
-        dni_swpld_write_attribute(mux_info->offset, mux_info->channel,BUS_LOCKED);   
+        dni_swpld_write_attribute(mux_info->offset, mux_info->channel,BUS_LOCKED);
     if ((fd = open(fullpath, O_RDONLY)) >= 0)
     {
         if ((len = read(fd, r_data, nbytes)) > 0)
@@ -218,8 +218,8 @@ int dni_lock_swpld_read_attribute(int addr)
 {
     int fd , fd1, nbytes = 10,data = 0, rv=-1;
     char r_data[10]   = {0};
-    char address[10] = {0};
-    sprintf(address, "%02x", addr);
+    char address[12] = {0};
+    snprintf(address, sizeof(address), "%02x", addr);
     DNI_BUS_LOCK();
     /* Create output file descriptor */
     if((fd = open(SWPLD_ADDR_PATH, O_WRONLY,  0644)) >=0)
@@ -248,8 +248,8 @@ int dni_lock_swpld_read_attribute(int addr)
 int dni_swpld_write_attribute(int addr, int data,int bus_lock)
 {
     int fd,fd1,rv = -1;
-    char address[10] = {0};
-    sprintf(address, "%02x", addr);
+    char address[12] = {0};
+    snprintf(address, sizeof(address), "%02x", addr);
     if(bus_lock == BUS_LOCK)
         DNI_BUS_LOCK();
     /* Create output file descriptor */
@@ -260,7 +260,7 @@ int dni_swpld_write_attribute(int addr, int data,int bus_lock)
             fsync(fd);
             if((fd1 = open(SWPLD_DATA_PATH, O_WRONLY,  0644)) >= 0)
             {
-                sprintf(address, "%02x", data);
+                snprintf(address, sizeof(address), "%02x", data);
                 if( write (fd1, address, 2) >0 )
                 {
                     rv=0;
diff --git a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/psui.c b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/psui.c
index fb0843e5..367fe770 100755
--- a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/psui.c
+++ b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/psui.c
@@ -42,15 +42,15 @@ dni_psu_pmbus_info_get(int id, char *node, int *value)
 {
     int  ret = 0;
     char node_path[PSU_NODE_MAX_PATH_LEN] = {0};
-    
+
     *value = 0;
 
     switch (id) {
     case PSU1_ID:
-        sprintf(node_path, "%s%s", PSU1_AC_PMBUS_PREFIX, node);   	
+        snprintf(node_path, sizeof(node_path), "%s%s", PSU1_AC_PMBUS_PREFIX, node);
 	break;
     case PSU2_ID:
-        sprintf(node_path, "%s%s", PSU2_AC_PMBUS_PREFIX, node);
+        snprintf(node_path, sizeof(node_path), "%s%s", PSU2_AC_PMBUS_PREFIX, node);
 	break;
     default:
 	break;
@@ -58,14 +58,14 @@ dni_psu_pmbus_info_get(int id, char *node, int *value)
 
     /* Read attribute value */
     *value = dni_i2c_lock_read_attribute(NULL, node_path);
-    
+
     return ret;
 }
 
 int
 onlp_psui_init(void)
 {
-    lockinit(); 
+    lockinit();
     return ONLP_STATUS_OK;
 }
 
@@ -87,12 +87,12 @@ dni_psu_info_get(onlp_psu_info_t* info)
     info->hdr.coids[1] = ONLP_THERMAL_ID_CREATE(index + CHASSIS_THERMAL_COUNT);
 
     /* Read PSU module name from attribute */
-    sprintf(node_path, "%s%s", PSU1_AC_PMBUS_PREFIX, "psu_mfr_model");
+    snprintf(node_path, sizeof(node_path), "%s%s", PSU1_AC_PMBUS_PREFIX, "psu_mfr_model");
     dni_i2c_read_attribute_string(node_path, val_char, sizeof(val_char), 0);
     strcpy(info->model, val_char);
-    
+
     /* Read PSU serial number from attribute */
-    sprintf(node_path, "%s%s", PSU1_AC_PMBUS_PREFIX, "psu_mfr_serial");
+    snprintf(node_path, sizeof(node_path), "%s%s", PSU1_AC_PMBUS_PREFIX, "psu_mfr_serial");
     dni_i2c_read_attribute_string(node_path, val_char, sizeof(val_char), 0);
     strcpy(info->serial, val_char);
 
@@ -111,7 +111,7 @@ dni_psu_info_get(onlp_psu_info_t* info)
         info->miout = val;
         info->caps |= ONLP_PSU_CAPS_IOUT;
     }
-    
+
     if (dni_psu_pmbus_info_get(index, "psu_i_in", &val) == 0) {
         info->miin = val;
         info->caps |= ONLP_PSU_CAPS_IIN;
@@ -120,12 +120,12 @@ dni_psu_info_get(onlp_psu_info_t* info)
     if (dni_psu_pmbus_info_get(index, "psu_p_out", &val) == 0) {
         info->mpout = val;
         info->caps |= ONLP_PSU_CAPS_POUT;
-    }   
+    }
 
     if (dni_psu_pmbus_info_get(index, "psu_p_in", &val) == 0) {
         info->mpin = val;
         info->caps |= ONLP_PSU_CAPS_PIN;
-    }   
+    }
 
     return ONLP_STATUS_OK;
 }
@@ -150,8 +150,8 @@ onlp_psui_info_get(onlp_oid_t id, onlp_psu_info_t* info)
     int val   = 0;
     int ret   = ONLP_STATUS_OK;
     int index = ONLP_OID_ID_GET(id);
-    uint8_t channel;
-    char channel_data[2] = {'\0'};
+    uint8_t channel = 0;
+    char channel_data[3] = {'\0'};
     mux_info_t mux_info;
     dev_info_t dev_info;
 
@@ -174,15 +174,15 @@ onlp_psui_info_get(onlp_oid_t id, onlp_psu_info_t* info)
 
     mux_info.offset = SWPLD_PSU_FAN_I2C_MUX_REG;
     mux_info.channel = channel;
-    mux_info.flags = DEFAULT_FLAG;    
-    
+    mux_info.flags = DEFAULT_FLAG;
+
     dev_info.bus = I2C_BUS_4;
     dev_info.addr = PSU_EEPROM;
     dev_info.offset = 0x00;	/* In EEPROM address 0x00 */
     dev_info.flags = DEFAULT_FLAG;
 
     /* Select PSU member(channel) */
-    sprintf(channel_data, "%x", channel);
+    snprintf(channel_data, sizeof(channel_data), "%x", channel);
     dni_i2c_lock_write_attribute(NULL, channel_data, PSU_SELECT_MEMBER_PATH);
 
 
@@ -192,7 +192,7 @@ onlp_psui_info_get(onlp_oid_t id, onlp_psu_info_t* info)
     /* Check PSU is PRESENT or not
      * Read PSU EEPROM 1 byte from adress 0x00
      * if not present, return Negative value.
-     */        
+     */
     if(val == 0 && dni_i2c_lock_read(&mux_info, &dev_info) < 0)
     {
         /* Unable to read PSU EEPROM */
@@ -203,7 +203,7 @@ onlp_psui_info_get(onlp_oid_t id, onlp_psu_info_t* info)
     else if(val == 0){
         /* Unable to read PSU VIN(psu_power_good) */
         info->status |= ONLP_PSU_STATUS_UNPLUGGED;
-    } 
+    }
     else {
         info->status |= ONLP_PSU_STATUS_PRESENT;
     }
diff --git a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/sfpi.c b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/sfpi.c
index b607a947..a023448e 100644
--- a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/sfpi.c
+++ b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/sfpi.c
@@ -102,7 +102,7 @@ int
 onlp_sfpi_init(void)
 {
     /* Called at initialization time */
-    lockinit(); 
+    lockinit();
     return ONLP_STATUS_OK;
 }
 
@@ -130,7 +130,7 @@ onlp_sfpi_is_present(int port)
     uint8_t present_bit = 0;
 
     /* Select QSFP port */
-    sprintf(port_data, "%d", port + 1);
+    snprintf(port_data, sizeof(port_data), "%d", port + 1);
     dni_i2c_lock_write_attribute(NULL, port_data, SFP_SELECT_PORT_PATH);
 
     /* Read QSFP MODULE is present or not */
@@ -228,7 +228,7 @@ onlp_sfpi_eeprom_read(int port, uint8_t data[256])
     dni_swpld_write_attribute(sfp_response_reg, backup_response_data,BUS_LOCK);
 
     /* Select QSFP port */
-    sprintf(port_data, "%d", port + 1);
+    snprintf(port_data, sizeof(port_data), "%d", port + 1);
     dni_i2c_lock_write_attribute(NULL, port_data, SFP_SELECT_PORT_PATH);
 
     memset(data, 0, 256);
@@ -416,7 +416,7 @@ onlp_sfpi_control_supported(int port, onlp_sfp_control_t control, int* rv)
     char port_data[3] = {'\0'};
 
     /* Select QSFP port */
-    sprintf(port_data, "%d", port + 1);
+    snprintf(port_data, sizeof(port_data), "%d", port + 1);
     dni_i2c_lock_write_attribute(NULL, port_data, SFP_SELECT_PORT_PATH);
 
     switch (control) {
@@ -446,12 +446,12 @@ onlp_sfpi_control_set(int port, onlp_sfp_control_t control, int value)
     char port_data[3] = {'\0'};
 
     /* Select QSFP port */
-    sprintf(port_data, "%d", port + 1);
+    snprintf(port_data, sizeof(port_data), "%d", port + 1);
     dni_i2c_lock_write_attribute(NULL, port_data, SFP_SELECT_PORT_PATH);
 
     switch (control) {
     case ONLP_SFP_CONTROL_RESET_STATE:
-    	sprintf(port_data, "%d", value);
+    	snprintf(port_data, sizeof(port_data), "%d", value);
 	dni_i2c_lock_write_attribute(NULL, port_data, SFP_RESET_PATH);
 	value_t = ONLP_STATUS_OK;
 	break;
@@ -462,7 +462,7 @@ onlp_sfpi_control_set(int port, onlp_sfp_control_t control, int value)
 	value_t = ONLP_STATUS_OK;
 	break;
     case ONLP_SFP_CONTROL_LP_MODE:
-    	sprintf(port_data, "%d", value);
+    	snprintf(port_data, sizeof(port_data), "%d", value);
 	dni_i2c_lock_write_attribute(NULL, port_data, SFP_LP_MODE_PATH);
 	value_t = ONLP_STATUS_OK;
 	break;
@@ -481,7 +481,7 @@ onlp_sfpi_control_get(int port, onlp_sfp_control_t control, int* value)
     char port_data[3] = {'\0'};
 
     /* Select QSFP port */
-    sprintf(port_data, "%d", port + 1);
+    snprintf(port_data, sizeof(port_data), "%d", port + 1);
     dni_i2c_lock_write_attribute(NULL, port_data, SFP_SELECT_PORT_PATH);
 
     switch (control) {
diff --git a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/thermali.c b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/thermali.c
index 3d99a974..cf5d8ad9 100644
--- a/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/thermali.c
+++ b/packages/platforms/delta/x86-64/x86-64-delta-ag9032v1/onlp/builds/src/module/src/thermali.c
@@ -24,6 +24,7 @@
  *
  ***********************************************************/
 #include <unistd.h>
+#include <limits.h>
 #include <onlplib/mmap.h>
 #include <onlplib/file.h>
 #include <onlp/platformi/thermali.h>
@@ -109,7 +110,7 @@ static onlp_thermal_info_t linfo[] = {
 int
 onlp_thermali_init(void)
 {
-    lockinit(); 
+    lockinit();
     return ONLP_STATUS_OK;
 }
 
@@ -129,8 +130,8 @@ onlp_thermali_info_get(onlp_oid_t id, onlp_thermal_info_t* info)
     int temp_base = 1;
     uint8_t local_id = 0;
     int r_data = 0;
-    char  fullpath[50] = {0};
-    char channel_data[2] = {'\0'};
+    char  fullpath[PATH_MAX] = {0};
+    char channel_data[3] = {'\0'};
     uint8_t channel;
     VALIDATE(id);
     local_id = ONLP_OID_ID_GET(id);
@@ -150,28 +151,28 @@ onlp_thermali_info_get(onlp_oid_t id, onlp_thermal_info_t* info)
     case THERMAL_1_ON_PSU1:
 	channel = PSU_I2C_SEL_PSU1_EEPROM;
 	/* Select PSU member */
-	sprintf(channel_data, "%x", channel);
+	snprintf(channel_data, sizeof(channel_data), "%x", channel);
  	dni_i2c_lock_write_attribute(NULL, channel_data, PSU_SELECT_MEMBER_PATH);
 	break;
     case THERMAL_1_ON_PSU2:
 	channel = PSU_I2C_SEL_PSU2_EEPROM;
 	/* Select PSU member */
-	sprintf(channel_data, "%x", channel);
+	snprintf(channel_data, sizeof(channel_data), "%x", channel);
  	dni_i2c_lock_write_attribute(NULL, channel_data, PSU_SELECT_MEMBER_PATH);
 	break;
     default:
         channel = 0x00; /* DEFAULT */
         break;
     }
-    
+
     mux_info_t mux_info;
     mux_info.offset = SWPLD_PSU_FAN_I2C_MUX_REG;
     mux_info.channel = channel;
     mux_info.flags = DEFAULT_FLAG;
 
-    sprintf(fullpath, "%s%s", PREFIX_PATH, last_path[local_id]);
+    snprintf(fullpath, PATH_MAX, "%s%s", PREFIX_PATH, last_path[local_id]);
     r_data = dni_i2c_lock_read_attribute(&mux_info, fullpath);
-    
+
     /* Current temperature in milli-celsius */
     info->mcelsius = r_data / temp_base;
 
-- 
2.20.1

